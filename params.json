{"name":"Dozerjs","tagline":"Foundational Framework for NodeJS Web Services","body":"# DozerJS\r\n\r\n<img align=\"right\" src=\"logo.png\">\r\n\r\nDozer is a system for rapidly developing services to support front-end applications.\r\n\r\nIt's not a framework, not a toolkit, rather Dozer aims to be a maleable and\r\nunopinionated foundation for developing RESTful API's and web services to support\r\nfront-end development.\r\n\r\nDozer creates a core server environment using [NodeJS](http://www.nodejs.org) and\r\nthe [Express framework](http://expressjs.com) then allows you to build api endpoints,\r\ndatabase models, components and adapters which all work together to provide the\r\nservices required on the front-end.\r\n\r\n## Core\r\n\r\nThe core of Dozer is the [Express](http://expressjs.com/) setup which sets a\r\nnumber of common configuration properties, handles RESTful API endpoints and\r\nserves static files. It then reads in the application configuration, loads any\r\nadapters, components & controllers, and chains everything together.\r\n\r\n## Components\r\n\r\nComponents are simply modules which are loaded and available throughout the application.\r\nThe can be database modules, express middleware or anything else required by the\r\napplication or any of the controllers.\r\n\r\n## Adapters\r\n\r\nSimilar to components adapters are modules which connect internally. Specifically\r\nthings like database adapters, sockets, etc.\r\n\r\n## API\r\n\r\nThe API files establish the RESTful endpoints to which your server will respond.\r\nThey are objects where the top-level methods correspond with the HTTP verbs that\r\nthe endpoint will support (`GET`, `POST`, `PUT`, `DELETE`, etc).\r\n\r\n## Controllers\r\n\r\nThe controllers are the engine for the server. Everything ultimately ends up in\r\na controller to be processed. This includes database interactions, sockets,\r\ncustom adapter usage, remote API procedures, etc. Controllers can be initialized\r\nup front to provide services throughout or can be built to simply cater to the\r\nneeds of the API.\r\n\r\n## Models\r\n\r\nModels represent the data. Each store/table in the database should have a model\r\nassociated with it. The models outline the structure and content-types of the\r\ndata. Models can be automatically validated in the controller with a number of\r\nsupported data-types, all of which are customizeable and easily maintained in the\r\ncore configuration.\r\n\r\n## View/Public\r\n\r\nDozer builds a server solution for developing front-end applications which interact\r\nwith API's, sockets and whatever else is provided by the server. On startup Dozer\r\nbuilds a static server instance through the `public` directory which serves all\r\nassets used by the application.\r\n\r\n---\r\n\r\n# Getting Started\r\n\r\n**Quick Start**\r\n\r\nDozerJS has an [npm available](https://www.npmjs.org/package/dozerjs) to make\r\ncreating new instances simple. To get started install the npm globally:\r\n\r\n`npm install dozerjs -g`\r\n\r\nThen simply run the `dozerjs` npm via the following:\r\n\r\n`dozerjs create NewProject`\r\n\r\nWhich will create the project with all neccesary assets and dependencies in the\r\ndirectory `./NewProject`.\r\n\r\n---\r\n\r\n**Manual Installation**\r\n\r\nTo get the foundation up and running simply clone it locally then run `npm install`\r\nto install the dependencies.\r\n\r\n---\r\n\r\nDozer is configured to run out of the box on any setup, so you can run it via\r\n`node index.js` in the root which will start the service.\r\n\r\n### Static Web (View)\r\n\r\nThe default port is `8181` so navigating to `http://yourserver.com:8181` will load\r\nthe static `index.html` from the `/public/src` directory.\r\n\r\n### API\r\n\r\nThe default build comes with a complete set of `/api/users` endpoints which are\r\nfully functional and are stored in an NeDB instance. The breakdown of files is:\r\n\r\n* `/models/users.js` - The model and data representation\r\n* `/api/users.js` - The API object associating HTTP verbs to the controller\r\n* `/controllers/users.js` - The controller that handles API requests\r\n\r\nThe `model` and `api` files are both fairly simple, setting up the configuration\r\nwhich Dozer uses to accurately respond to requests and interact with the controller.\r\n\r\nThe `controller` file has a number of methods which correspond to the verbs in the\r\n`api` file.\r\n\r\n**API Examples:**\r\n\r\n`GET`:`http://yourserver.com:8181/api/users/`\r\n\r\nReturns all the users in the data store or empty array\r\n\r\n`GET`:`http://yourserver.com:8181/api/users/{ID}`\r\n\r\nReturns a specific user based on the `{ID}` or empty array\r\n\r\n`POST`:`http://youserver.com:8181/api/user/`\r\n\r\nWhen requested with payload of key-values matching the model will create a new\r\nuser record\r\n\r\n`PUT`:`http://yourserver.com:8181/api/users/{ID}`\r\n\r\nWhen requested with payload of key-values matching the model will update a user\r\nrecord with matching `{ID}`\r\n\r\n`DELETE`:`http://yourserver.com:8181/api/users/{ID}`\r\n\r\nWill delete the user record with matching `{ID}`\r\n","google":"UA-48090529-1","note":"Don't delete this file! It's used internally to help with page regeneration."}